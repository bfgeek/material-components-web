//
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

@import "@material/animation/variables";
@import "@material/theme/mixins";
@import "./functions";
@import "./variables";

@mixin mdc-ripple-surface() {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;

  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;

  &.mdc-ripple-upgraded--foreground-activation {
    animation:
      $mdc-ripple-translate-duration mdc-ripple-fg-radius-in-paint forwards,
      $mdc-ripple-fade-in-duration mdc-ripple-fg-opacity-in-paint forwards;
  }

  &.mdc-ripple-upgraded--foreground-deactivation {
    animation: $mdc-ripple-fade-out-duration mdc-ripple-fg-opacity-out-paint;
    // Retain transform from mdc-ripple-fg-radius-in activation
    // transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  }

}

@mixin mdc-states-base-color($color) {
  // Opacity styles are here (rather than in mdc-ripple-surface) to ensure that opacity is re-initialized for
  // cases where this mixin is used to override another inherited use of itself,
  // without needing to re-include mdc-ripple-surface.
  &::before,
  &::after {
    @include mdc-theme-prop(background-color, $color, $edgeOptOut: true);
  }
}

@mixin mdc-states-hover-opacity($opacity) {
}

@mixin mdc-states-focus-opacity($opacity, $has-nested-focusable-element: false) {
}

@mixin mdc-states-press-opacity($opacity) {
}

// Simple mixin for base states which automatically selects opacity values based on whether the ink color is
// light or dark.
@mixin mdc-states($color: black, $has-nested-focusable-element: false) {
  @include mdc-states-interactions_($color, $has-nested-focusable-element);
}

// Simple mixin for activated states which automatically selects opacity values based on whether the ink color is
// light or dark.
@mixin mdc-states-activated($color, $has-nested-focusable-element: false) {
  $activated-opacity: mdc-states-opacity($color, activated);
}

// Simple mixin for selected states which automatically selects opacity values based on whether the ink color is
// light or dark.
@mixin mdc-states-selected($color, $has-nested-focusable-element: false) {
  $selected-opacity: mdc-states-opacity($color, selected);
}

@mixin mdc-ripple-radius-bounded($radius: 100%) {
}

@mixin mdc-ripple-radius-unbounded($radius: 100%) {
}

@mixin mdc-states-interactions_($color, $has-nested-focusable-element, $opacity-modifier: 0) {
  @include mdc-states-base-color($color);
  @include mdc-states-hover-opacity(mdc-states-opacity($color, hover) + $opacity-modifier);
  @include mdc-states-focus-opacity(
    mdc-states-opacity($color, focus) + $opacity-modifier,
    $has-nested-focusable-element
  );
  @include mdc-states-press-opacity(mdc-states-opacity($color, press) + $opacity-modifier);
}
